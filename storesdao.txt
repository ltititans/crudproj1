package com.lti.bookstore.DAO;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import com.lti.bookstore.model.Stores;
import com.lti.bookstore.model.Stores;


public class StoresDao {
	private String jdbcURL = "jdbc:oracle:thin:@localhost:1521:xe";

	private String jdbcUsername = "system";

	private String jdbcPassword = "123";



	private static final String INSERT_USERS_SQL = "INSERT INTO stores VALUES "



				+ " (seq_stores.NEXTVAL,?, ?, ?,?)";

	private static final String SELECT_USER_BY_ID = "select stores_id,address,city,state,zipcode from stores where stores_id =?";
	private static final String SELECT_ALL_USERS = "select * from stores";
	private static final String DELETE_USERS_SQL = "delete from stores where stores_id = ?";
	private static final String UPDATE_USERS_SQL = "update stores set stores_id = ?,"+ "address= ?," + "city= ? ,"+"state=? where stores_id= ?";


	public StoresDao() {
		// TODO Auto-generated constructor stub
	}



	protected Connection getConnection() {

		Connection connection = null;

		try {

			Class.forName("oracle.jdbc.driver.OracleDriver");

			connection = DriverManager.getConnection(jdbcURL, jdbcUsername, 

					jdbcPassword);

		} catch (SQLException e) {

			// TODO Auto-generated catch block

			e.printStackTrace();

		} catch (ClassNotFoundException e) {

			// TODO Auto-generated catch block

			e.printStackTrace();

		}

		return connection;

	}



	public void insertUser(Stores stores) throws SQLException {

		System.out.println(INSERT_USERS_SQL);

		// try-with-resource statement will auto close the connection.

		try {Connection connection = getConnection();

		PreparedStatement preparedStatement = connection.prepareStatement(INSERT_USERS_SQL);





		preparedStatement.setString(1, stores.getAddress());

		preparedStatement.setString(2, stores.getCity());

		preparedStatement.setString(3, stores.getState());
		preparedStatement.setString(3, stores.getZipcode());

		System.out.println(preparedStatement);

		preparedStatement.executeUpdate();

		} catch (SQLException e) {

			printSQLException(e);

		}

	}



	public Stores selectUser(int stores_id) {

		Stores user1 = null;

		// Step 1: Establishing a Connection

		try {Connection connection = getConnection();

		// Step 2:Create a statement using connection object

		PreparedStatement preparedStatement = connection.prepareStatement(SELECT_USER_BY_ID);

		preparedStatement.setInt(1, stores_id);

		System.out.println(preparedStatement);

		// Step 3: Execute the query or update query

		ResultSet rs = preparedStatement.executeQuery();



		// Step 4: Process the ResultSet object.

		while (rs.next()) {


			int store_id= rs.getInt("store_id");

			String add = rs.getString("address");

			String city = rs.getString("city");
			String state=rs.getString("state");
			String zipcode=rs.getString("zipcode");



			user1 = new Stores(store_id,add,city,state,zipcode);

		}

		} catch (SQLException e) {

			printSQLException(e);

		}

		return user1;

	}



	public List<Stores> selectAllUsers() {


		List<Stores> user1 = new ArrayList<>();


		try {Connection connection = getConnection();



		// Step 2:Create a statement using connection object

		PreparedStatement preparedStatement = connection.prepareStatement

				(SELECT_ALL_USERS);

		System.out.println(preparedStatement);

		// Step 3: Execute the query or update query

		ResultSet rs = preparedStatement.executeQuery();



		// Step 4: Process the ResultSet object.

		while (rs.next()) {

			int store_id= rs.getInt("store_id");

			String add = rs.getString("address");

			String city = rs.getString("city");
			String state=rs.getString("state");
			String zipcode=rs.getString("zipcode");
			user1 =(List<Stores>) new Stores(store_id,add,city,state,zipcode);
		}

		} catch (SQLException e) {

			printSQLException(e);

		}

		return user1;

	}



	public boolean deleteUser(int store_id) throws SQLException {

		boolean rowDeleted;

		try (Connection connection = getConnection();

				PreparedStatement statement = connection.prepareStatement(DELETE_USERS_SQL);) {

			statement.setInt(1, store_id);

			rowDeleted = statement.executeUpdate() > 0;

		}

		return rowDeleted;

	}



	public boolean updateUser(Stores stores) throws SQLException {

		boolean rowUpdated = true;

		try (Connection connection = getConnection();

				PreparedStatement preparedStatement = connection.prepareStatement(UPDATE_USERS_SQL);)
		{
			preparedStatement.setString(1, stores.getAddress());

			preparedStatement.setString(2, stores.getCity());

			preparedStatement.setString(3, stores.getState());
			preparedStatement.setString(4, stores.getZipcode());

			System.out.println(preparedStatement);

			preparedStatement.executeUpdate();
		}


		return rowUpdated;

	}



	private void printSQLException(SQLException ex) {



		ex.printStackTrace();



	}


}
