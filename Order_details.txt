private String jdbcURL = "jdbc:oracle:thin:@localhost:1521:xe";
		private String jdbcUsername = "system";
		private String jdbcPassword = "123";

		private static final String INSERT_USERS_SQL = "INSERT INTO order_details VALUES "
				+ " (seq_users1.NEXTVAL,?, ?, ?)";

		private static final String SELECT_USER_BY_ID = "select order_details_id,order_id,price,discount from order_details where order_details_id =?";
		private static final String SELECT_ALL_USERS = "select * from order_details";
		private static final String DELETE_USERS_SQL = "delete from order_details where order_details_id = ?";
		private static final String UPDATE_USERS_SQL = "update order_details set price = ?,"
				+ "   where order_details_id = ?";

		public User1Dao() {
		}

		protected Connection getConnection() {
			Connection connection = null;
			try {
				Class.forName("oracle.jdbc.driver.OracleDriver");
				connection = DriverManager.getConnection(jdbcURL, jdbcUsername, 
						jdbcPassword);
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (ClassNotFoundException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			return connection;
		}

		public void insertUser(OrderDetails order) throws SQLException {
			System.out.println(INSERT_USERS_SQL);
			// try-with-resource statement will auto close the connection.
			try {Connection connection = getConnection();
					PreparedStatement preparedStatement = connection.prepareStatement(INSERT_USERS_SQL);
														
				preparedStatement.setInt(1, order.getOrder_details_id());
				preparedStatement.setInt(2, order.getOrder_id());
				preparedStatement.setInt(3, order.getPrice());
				preparedStatement.setInt(4, order.getDiscount());
				System.out.println(preparedStatement);
				preparedStatement.executeUpdate();
			} catch (SQLException e) {
				printSQLException(e);
			}
		}

		public OrderDetails selectUser(int iid) {
			OrderDetails user1 = null;
			// Step 1: Establishing a Connection
			try {Connection connection = getConnection();
					// Step 2:Create a statement using connection object
					PreparedStatement preparedStatement = connection.prepareStatement(SELECT_USER_BY_ID);
				preparedStatement.setInt(1, order.getOrder_details_id());
				System.out.println(preparedStatement);
				// Step 3: Execute the query or update query
				ResultSet rs = preparedStatement.executeQuery();

				// Step 4: Process the ResultSet object.
				while (rs.next()) {
					int order_details_id = rs.getInt("order_details_id");
					int order_id = rs.getInt("order_id");
					int price = rs.getInt("price");
					int discount=rs.getInt("discount");
					user1 = new OrderDetails(order_details_id, order_id, price,discount);
				}
			} catch (SQLException e) {
				printSQLException(e);
			}
			return user1;
		}

		public List<OrderDetails> selectAllUsers() {

			// using try-with-resources to avoid closing resources (boiler plate code)
			List<OrderDetails> users1 = new ArrayList<>();
			// Step 1: Establishing a Connection
			try {Connection connection = getConnection();

					// Step 2:Create a statement using connection object
				PreparedStatement preparedStatement = connection.prepareStatement
						(SELECT_ALL_USERS);
				System.out.println(preparedStatement);
				// Step 3: Execute the query or update query
				ResultSet rs = preparedStatement.executeQuery();

				// Step 4: Process the ResultSet object.
				while (rs.next()) {
					int order_details_id = rs.getInt("order_details_id");
					int order_id = rs.getInt("order_id")
					int price = rs.getInt("price")
					int discount = rs.getInt("discount");
					users1.add(new OrderDetails(order_details_id, order_id, price,discount));
				}
			} catch (SQLException e) {
				printSQLException(e);
			}
			return users1;
		}

		public boolean deleteUser(int order_details_id) throws SQLException {
			boolean rowDeleted;
			try (Connection connection = getConnection();
					PreparedStatement statement = connection.prepareStatement(DELETE_USERS_SQL);) {
				statement.setInt(1, order_details_id);
				rowDeleted = statement.executeUpdate() > 0;
			}
			return rowDeleted;
		}

		public boolean updateUser(OrderDetails user1) throws SQLException {
			boolean rowUpdated;
			try (Connection connection = getConnection();
					PreparedStatement statement = connection.prepareStatement
							(UPDATE_USERS_SQL);) {
				statement.setInt(1, order.getPrice());
				statement.setInt(2, order.getOrder_details_id());
				rowUpdated = statement.executeUpdate() > 0;
			}
			return rowUpdated;
		}

		private void printSQLException(SQLException ex) {
			
					ex.printStackTrace();
					
					}
				